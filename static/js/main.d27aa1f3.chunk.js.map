{"version":3,"sources":["components/Header.js","components/Intraday.js","components/Daily.js","components/Weekly.js","components/Monthly.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Intraday","state","high","low","volume","change","axios","method","url","dataResponse","params","apikey","this","props","apiKey","function","interval","symbol","stockEquitySymbol","then","result","console","log","catch","error","Daily","Weekly","Monthly","Footer","App","stockName","stockSymbol","reactApiKey","process","loading","keywords","data","bestMatches","name","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAEqBA,G,uLAGb,OACI,yBAAKC,UAAU,WACX,8C,GALoBC,c,gBCCfC,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,KAAM,GACNC,IAAK,GACLC,OAAQ,GACRC,OAAQ,IANF,E,iFAYVC,IAAM,CACFC,OAAO,MACPC,IAAI,oCACJC,aAAc,OACVC,OAAQ,CACJC,OAAQC,KAAKC,MAAMC,OACnBC,SAAU,uBACVC,SAAU,OACVC,OAAQL,KAAKC,MAAMK,qBAG9BC,MAAK,SAACC,GACHC,QAAQC,IAAIF,MAMfG,OAAM,SAACC,GACJH,QAAQC,IAAIE,Q,+BAgBhB,OACI,yBAAK1B,UAAU,uBACX,wCACA,4BACI,4BACI,mCACA,6BAEJ,4BACI,kCACA,6BAEJ,4BACI,qCACA,6BAEJ,4BACI,qCACA,mC,GAlEcC,aCDjB0B,E,iLAGb,OACI,yBAAK3B,UAAU,4B,GAJQC,aCAd2B,E,iLAGb,OACI,yBAAK5B,UAAU,4B,GAJSC,aCAf4B,E,iLAGb,OACI,yBAAK7B,UAAU,4B,GAJUC,aCAhB6B,E,iLAGb,OACI,yBAAK9B,UAAU,WACX,0D,GALoBC,aCQf8B,E,YACjB,aAAe,IAAD,8BACZ,+CACK5B,MAAQ,CACX6B,UAAW,GACXC,YAAa,GACbC,YAAaC,mBACbC,SAAS,GANC,E,iFAUO,IAAD,OAEXF,EAAepB,KAAKX,MAApB+B,YAEP1B,IAAM,CACJC,OAAO,MACPC,IAAI,oCACJC,aAAc,OACVC,OAAQ,CACJC,OAAQqB,EACRjB,SAAU,gBACVoB,SAAU,UAGnBhB,MAAK,SAACC,GACL,IAAMH,EAASG,EAAOgB,KAAKC,YAAY,GAAG,aACpCC,EAAOlB,EAAOgB,KAAKC,YAAY,GAAG,WACxC,EAAKE,SAAS,CACZT,UAAWQ,EACXP,YAAad,EACbiB,SAAS,OAGZX,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAIN,IAAD,EAOHZ,KAAKX,MAJP6B,EAHK,EAGLA,UACAC,EAJK,EAILA,YACAC,EALK,EAKLA,YAIF,OATO,EAMLE,QAGkB,8BAGd,yBAAKpC,UAAU,OACb,gCACE,kBAAC,EAAD,OAEF,8BACE,yBAAKA,UAAU,WACf,4BAAKgC,EAAL,KAAkBC,EAAlB,KACE,4BACE,4BACE,kBAAC,EAAD,CAAUjB,OAAQkB,EAAad,kBAAmBa,KAEpD,4BACE,kBAAC,EAAD,CAAOjB,OAAQkB,EAAad,kBAAmBa,KAEjD,4BACE,kBAAC,EAAD,CAAQjB,OAAQkB,EAAad,kBAAmBa,KAElD,4BACE,kBAAC,EAAD,CAASjB,OAAQkB,EAAad,kBAAmBa,QAKzD,gCACE,kBAAC,EAAD,Y,GA3EiBhC,aCEbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.d27aa1f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"wrapper\">\r\n                <h1>h-l index</h1>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class Intraday extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            high: '',\r\n            low: '',\r\n            volume: '',\r\n            change: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n\r\n        axios({\r\n            method:'GET',\r\n            url: `https://www.alphavantage.co/query`,\r\n            dataResponse: 'json',\r\n                params: {\r\n                    apikey: this.props.apiKey,\r\n                    function: 'TIME_SERIES_INTRADAY',\r\n                    interval: '1min',\r\n                    symbol: this.props.stockEquitySymbol\r\n                }\r\n        })\r\n        .then((result) => {\r\n            console.log(result);\r\n\r\n            // this.setState({\r\n\r\n            // });\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     if (this.props.stockEquitySymbol !== prevProps.stockEquitySymbol) {\r\n\r\n    //         this.setState({\r\n    //             symbol: this.props.stockEquitySymbol\r\n    //         });\r\n\r\n    //     }\r\n    // }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"timeSeriesContainer\">\r\n                <h3>intraday</h3>\r\n                <ul>\r\n                    <li>\r\n                        <p>high</p>\r\n                        <p></p>\r\n                    </li>\r\n                    <li>\r\n                        <p>low</p>\r\n                        <p></p>\r\n                    </li>\r\n                    <li>\r\n                        <p>volume</p>\r\n                        <p></p>\r\n                    </li>\r\n                    <li>\r\n                        <p>change</p>\r\n                        <p></p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Daily extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"timeSeriesContainer\">\r\n                \r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Weekly extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"timeSeriesContainer\">\r\n                \r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Monthly extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"timeSeriesContainer\">\r\n                \r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"wrapper\">\r\n                <p>copyright vincent 2019</p>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Intraday from './components/Intraday';\nimport Daily from './components/Daily';\nimport Weekly from './components/Weekly';\nimport Monthly from './components/Monthly';\nimport Footer from './components/Footer';\nimport axios from 'axios';\n\nexport default class App extends Component {\n    constructor() {\n      super();\n      this.state = {\n        stockName: '',\n        stockSymbol: '',\n        reactApiKey: process.env.REACT_APP_ALPHAVANTAGE_API_KEY,\n        loading: true\n      }\n    }\n    \n    componentDidMount() {\n\n      const {reactApiKey} = this.state;\n\n      axios({\n        method:'GET',\n        url: `https://www.alphavantage.co/query`,\n        dataResponse: 'json',\n            params: {\n                apikey: reactApiKey,\n                function: 'SYMBOL_SEARCH',\n                keywords: 'MSFT',\n            }\n      })\n      .then((result) => {\n        const symbol = result.data.bestMatches[0][\"1. symbol\"]; \n        const name = result.data.bestMatches[0][\"2. name\"];\n        this.setState({\n          stockName: name,\n          stockSymbol: symbol,\n          loading: false\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      }); \n    }\n\n    render() {\n      \n      const {\n        stockName, \n        stockSymbol,\n        reactApiKey,\n        loading\n      } = this.state;\n\n      if (loading) return <div />\n\n        return (\n            <div className=\"App\">\n              <header>\n                <Header />\n              </header>\n              <main>\n                <div className=\"wrapper\">\n                <h2>{stockName} ({stockSymbol})</h2>\n                  <ul>\n                    <li>\n                      <Intraday apiKey={reactApiKey} stockEquitySymbol={stockSymbol}/>\n                    </li>\n                    <li>\n                      <Daily apiKey={reactApiKey} stockEquitySymbol={stockSymbol}/>\n                    </li>\n                    <li>\n                      <Weekly apiKey={reactApiKey} stockEquitySymbol={stockSymbol}/>\n                    </li>\n                    <li>\n                      <Monthly apiKey={reactApiKey} stockEquitySymbol={stockSymbol}/>\n                    </li>  \n                  </ul>\n                </div> \n              </main>\n              <footer>\n                <Footer />\n              </footer>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}